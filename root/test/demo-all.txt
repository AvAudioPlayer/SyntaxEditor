// Program
// EmptyStatement
// BlockStatement
// ExpressionStatement
// IfStatement

if (a) {
	b;
}
else if (c) {
	d;
}
else {
    e;
}

if (a) {
	b;
}

if (a) {
	b;
}
else {
	c;
}

// LabeledStatement

label: a = b + c;

// BreakStatement
// ContinueStatement
// WithStatement
// SwitchStatement
// ReturnStatement
// ThrowStatement
// TryStatement

try {
	a + b;
} catch(err) {
	c - d;
} finally {
	u * v;
}

try {
	a + b;
} catch(err) {
	c - d;
}

try {
	a + b;
} finally {
	u * v;
}



// WhileStatement

while (true) ;
while (true) {}
while (true) {
	a + b;
}

// DoWhileStatement

do {} while (true);
do {
	a + b
} while (true);

// ForStatement

for (;;);
for (;;) {}
for (var i = 0, len = list.length; i < len; ++i) {
	a + b;
	c * d;
}

// ForInStatement

for (k in o);
for (var k in o);
for (var k in o) o[k];
for (var k in o) {}
for (var k in o) {
	o[k];
}

// ForOfStatement

// LetStatement

// DebuggerStatement

debugger;

// FunctionDeclaration

function f () {};
function f (a) {};
function f (a, b) {
	a = function a2() {
		a + b;
	};

	function s() {

	};
}

// VariableDeclaration
// VariableDeclarator

var a;
var a, b;
var a = 100;
var a = 100, b;
var a = 100, b = 200;

// ThisExpression

this;

// ArrayExpression

a = []
a = [1]
a = [1,2,3]
a = [1,[2],3]
a = [1, [2,3]]

// ObjectExpression
// Property

a = {};
a = {
	name: 'blablabla',
	age: 99
};
a = {
	name: 'blablabla',
	age: 99,
	father: {
		name: 'blablabla\'s father',
		age: 199
	}
};

// FunctionExpression

a = function() {};
a = function f() {};
a = function f(a,b) {};
a = function f(a,b) {
	x + y;
};
a = function(a,b) {
	x + y;
	u - v;

	f = function sub() {
		a + b;
	};
};

// ArrowExpression

// UnaryExpression

- a;
+ a;
! a;
~ a;
typeof a;
void a;
delete a;

// BinaryExpression

a == b
a != b
a === b
a !== b
a < b
a <= b
a > b
a >= b
a << b
a >> b
a >>> b
a + b
a - b
a * b
a / b
a % b
a ^ b
a & b
a in b
a instanceof b
// a .. b

// AssignmentExpression

a = b
a += b
a -= b
a *= b
a /= b
a %= b
a <<= b
a >>= b
a >>>= b
a = b
a ^= b
a &= b

// UpdateExpression

++a
--a
a++
a--

// LogicalExpression

a && b
a || b

// ConditionalExpression

a ? b : c
(a ? b : c) ? d : e
a ? (b ? c : d) : e
a ? b : (c ? d : e)

// NewExpression

new Object;
new Object();
new Object(a);
new Object(a,b);

// CallExpression

f()
f(1)
f(1,2)
f()()
f(f())

// MemberExpression

a.b
a[b]
a.b.c
a[b][c]

// YieldExpression

// ComprehensionExpression

// GeneratorExpression

// GraphExpression

// GraphIndexExpression

// LetExpression

// ObjectPattern

// ArrayPattern

// SwitchCase

// CatchClause

// ComprehensionBlock

// Identifier

// Literal